// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1

import (
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	innsmouth "k8s.io/apiserver-builder/example/pkg/apis/innsmouth"
	unsafe "unsafe"
)

func init() {
	SchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1_DeepOne_To_innsmouth_DeepOne,
		Convert_innsmouth_DeepOne_To_v1_DeepOne,
		Convert_v1_DeepOneList_To_innsmouth_DeepOneList,
		Convert_innsmouth_DeepOneList_To_v1_DeepOneList,
		Convert_v1_DeepOneSpec_To_innsmouth_DeepOneSpec,
		Convert_innsmouth_DeepOneSpec_To_v1_DeepOneSpec,
		Convert_v1_DeepOneStatus_To_innsmouth_DeepOneStatus,
		Convert_innsmouth_DeepOneStatus_To_v1_DeepOneStatus,
	)
}

func autoConvert_v1_DeepOne_To_innsmouth_DeepOne(in *DeepOne, out *innsmouth.DeepOne, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_DeepOneSpec_To_innsmouth_DeepOneSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_DeepOneStatus_To_innsmouth_DeepOneStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1_DeepOne_To_innsmouth_DeepOne(in *DeepOne, out *innsmouth.DeepOne, s conversion.Scope) error {
	return autoConvert_v1_DeepOne_To_innsmouth_DeepOne(in, out, s)
}

func autoConvert_innsmouth_DeepOne_To_v1_DeepOne(in *innsmouth.DeepOne, out *DeepOne, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_innsmouth_DeepOneSpec_To_v1_DeepOneSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_innsmouth_DeepOneStatus_To_v1_DeepOneStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_innsmouth_DeepOne_To_v1_DeepOne(in *innsmouth.DeepOne, out *DeepOne, s conversion.Scope) error {
	return autoConvert_innsmouth_DeepOne_To_v1_DeepOne(in, out, s)
}

func autoConvert_v1_DeepOneList_To_innsmouth_DeepOneList(in *DeepOneList, out *innsmouth.DeepOneList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]innsmouth.DeepOne)(unsafe.Pointer(&in.Items))
	return nil
}

func Convert_v1_DeepOneList_To_innsmouth_DeepOneList(in *DeepOneList, out *innsmouth.DeepOneList, s conversion.Scope) error {
	return autoConvert_v1_DeepOneList_To_innsmouth_DeepOneList(in, out, s)
}

func autoConvert_innsmouth_DeepOneList_To_v1_DeepOneList(in *innsmouth.DeepOneList, out *DeepOneList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items == nil {
		out.Items = make([]DeepOne, 0)
	} else {
		out.Items = *(*[]DeepOne)(unsafe.Pointer(&in.Items))
	}
	return nil
}

func Convert_innsmouth_DeepOneList_To_v1_DeepOneList(in *innsmouth.DeepOneList, out *DeepOneList, s conversion.Scope) error {
	return autoConvert_innsmouth_DeepOneList_To_v1_DeepOneList(in, out, s)
}

func autoConvert_v1_DeepOneSpec_To_innsmouth_DeepOneSpec(in *DeepOneSpec, out *innsmouth.DeepOneSpec, s conversion.Scope) error {
	out.FishRequired = in.FishRequired
	return nil
}

func Convert_v1_DeepOneSpec_To_innsmouth_DeepOneSpec(in *DeepOneSpec, out *innsmouth.DeepOneSpec, s conversion.Scope) error {
	return autoConvert_v1_DeepOneSpec_To_innsmouth_DeepOneSpec(in, out, s)
}

func autoConvert_innsmouth_DeepOneSpec_To_v1_DeepOneSpec(in *innsmouth.DeepOneSpec, out *DeepOneSpec, s conversion.Scope) error {
	out.FishRequired = in.FishRequired
	return nil
}

func Convert_innsmouth_DeepOneSpec_To_v1_DeepOneSpec(in *innsmouth.DeepOneSpec, out *DeepOneSpec, s conversion.Scope) error {
	return autoConvert_innsmouth_DeepOneSpec_To_v1_DeepOneSpec(in, out, s)
}

func autoConvert_v1_DeepOneStatus_To_innsmouth_DeepOneStatus(in *DeepOneStatus, out *innsmouth.DeepOneStatus, s conversion.Scope) error {
	out.ActualFish = in.ActualFish
	return nil
}

func Convert_v1_DeepOneStatus_To_innsmouth_DeepOneStatus(in *DeepOneStatus, out *innsmouth.DeepOneStatus, s conversion.Scope) error {
	return autoConvert_v1_DeepOneStatus_To_innsmouth_DeepOneStatus(in, out, s)
}

func autoConvert_innsmouth_DeepOneStatus_To_v1_DeepOneStatus(in *innsmouth.DeepOneStatus, out *DeepOneStatus, s conversion.Scope) error {
	out.ActualFish = in.ActualFish
	return nil
}

func Convert_innsmouth_DeepOneStatus_To_v1_DeepOneStatus(in *innsmouth.DeepOneStatus, out *DeepOneStatus, s conversion.Scope) error {
	return autoConvert_innsmouth_DeepOneStatus_To_v1_DeepOneStatus(in, out, s)
}
